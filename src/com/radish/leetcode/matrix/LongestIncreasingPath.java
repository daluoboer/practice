package com.radish.leetcode.matrix;

/**
 * @description LongestIncreasingPath
 *
 * 矩阵中的最长递增路径
 * 给定一个整数矩阵，找出最长递增路径的长度。
 *
 * 对于每个单元格，你可以往上，下，左，右四个方向移动。 你不能在对角线方向上移动或移动到边界外（即不允许环绕）。
 *
 * 示例 1:
 *
 * 输入: nums =
 * [
 *   [9,9,4],
 *   [6,6,8],
 *   [2,1,1]
 * ]
 * 输出: 4
 * 解释: 最长递增路径为 [1, 2, 6, 9]。
 * 示例 2:
 *
 * 输入: nums =
 * [
 *   [3,4,5],
 *   [3,2,6],
 *   [2,2,1]
 * ]
 * 输出: 4
 * 解释: 最长递增路径是 [3, 4, 5, 6]。注意不允许在对角线方向上移动。
 *
 * @Author Radish
 * @Date 2020-07-27 13:56:10
 */

public class LongestIncreasingPath {
    public int longestIncreasingPath(int[][] matrix) {
        /*这咋写啊？我咋知道要从哪儿开始，怎样走呢？
        应该要从小的数儿开始吧？那要先找到比较小的数吗？
        难道要找到每个数的路径吗，那可有点麻烦哦，记录下每个点的路径，然后后面的点走到已经记录过的点时，就可以直接取值~
        */
        return 0;
    }
}
